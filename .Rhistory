breast_cancer <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", header = TRUE, sep = " ")
breast_cancer <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", header = TRUE, sep = ",")
View(breast_cancer)
breast_cancer <- breast_cancer[-1]
View(breast_cancer)
names(breast_cancer) <- c("Cl.thickness", "Cell.size", "Cell.shape", "Marg.adhesion", "Epith.c.size", "Bare.nuclei", "Bl.cromatin", "Normal.nucleoli", "Mitoses")
View(breast_cancer)
View(breast_cancer)
breast_cancer <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", header = TRUE, sep = "," )
breast_cancer <- breast_cancer[-1]
names(breast_cancer) <- c("Cl.thickness", "Cell.size", "Cell.shape", "Marg.adhesion", "Epith.c.size", "Bare.nuclei", "Bl.cromatin", "Normal.nucleoli", "Mitoses")
breast_cancer
View(breast_cancer)
breast_cancer <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", header = TRUE, sep = "," )
View(breast_cancer)
breast_cancer <- breast_cancer[2:10]
View(breast_cancer)
breast_cancer <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", header = TRUE, sep = "," )
View(breast_cancer)
breast_cancer <- breast_cancer[2:10]
names(breast_cancer) <- c("Cl.thickness", "Cell.size", "Cell.shape", "Marg.adhesion", "Epith.c.size", "Bare.nuclei", "Bl.cromatin", "Normal.nucleoli", "Mitoses")
breast_cancer$Bare.nuclei["?"]
breast_cancer$Bare.nuclei["?"]
breast_cancer[?, "Bare.nuclei"]
breast_cancer["?"" , "Bare.nuclei"]
```
breast_cancer["?" , "Bare.nuclei"]
View(breast_cancer)
breast_cancer$Bare.nuclei["bare.nuclei" == "?"]
breast_cancer$Bare.nuclei["bare.nuclei" == ?]
breast_cancer$Bare.nuclei[breastcancer$bare.nuclei == "?"]
breast_cancer$Bare.nuclei[breast_cancer$bare.nuclei == "?"]
breast_cancer %>% filter(Bare.nuclei == "?")
breast_cancer %>% select %>% (bare.nuclei) %>% filter(Bare.nuclei == "?")
breast_cancer %>% select %>% (Bare.nuclei) %>% filter(Bare.nuclei == "?")
breast_cancer %>% select %>% (Bare.nuclei)
breast_cancer %>% select %>% (Bare.nuclei)
breast_cancer %>% select(Bare.nuclei)
breast_cancer$Bare.nuclei[breast_cancer$Bare.nuclei == "?"]
breast_cancer$Bare.nuclei[breast_cancer$Bare.nuclei == "?"] <- NA
View(breast_cancer)
breast_cancer$Bare.nuclei <- as.integer(breast_cancer$Bare.nuclei)
View(breast_cancer)
data("BreastCancer")
rm(breast_cancer)
View(BreastCancer)
BreastCancer[-.]
BreastCancer[-]
BreastCancer[-1]
BreastCancer[1:-1]
BreastCancer[2:10]
breast_cancer_x <- BreastCancer[2:10]
breast_cancery_y <- BreastCancer$Class
breastcancer_model <- train(x = breast_cancer_x, #another way to  specify the model formula
y = breast_cancery_y, # y = the response variable
method = "glm",
trControl = myControl,
preprocess = "medianImpute")
breastcancer_model <- train(x = breast_cancer_x, #another way to  specify the model formula
y = breast_cancery_y, # y = the response variable
method = "glm",
trControl = myControl,
preProcess = "medianImpute")
as.integer(breast_cancer_x)
map(.x = breast_cancer_x, as.integer)
BreastCancer <- map(.x = breast_cancer_x, as.integer)
breast_cancer_x <- BreastCancer[2:10] #predictors, a.k.a. formula variables
data("BreastCancer")
BreastCancer <- map(.x = breast_cancer_x, as.integer)
BreastCancer <- as.dataframe(map(.x = breast_cancer_x, as.integer))
BreastCancer <- as.data.frame(map(.x = breast_cancer_x, as.integer))
BreastCancer <-  invoke_map_df(.f = as.integer, .x = BreastCancer)
BreastCancer <-  invoke_map(.f = as.integer, .x = BreastCancer)
data("BreastCancer")
BreastCancer <-  map_df(.x = BreastCancer, .f = as.integer())
BreastCancer <-  map_df(.x = BreastCancer, .f = as.integer)
breast_cancer_x <- BreastCancer[2:10] #predictors, a.k.a. formula variables
breast_cancery_y <- BreastCancer$Class # the response variable
View(BreastCancer)
View(breast_cancer_x)
breast_cancery_y <- BreastCancer$Class # the response variable
data("BreastCancer")
data("BreastCancer")
breast_cancer_x <- BreastCancer[2:10] #predictors, a.k.a. formula variables
breast_cancer_x <-  map_df(.x = breast_cancer_x, .f = as.integer)
breast_cancery_y <- BreastCancer$Class # the response variable
breastcancer_model <- train(x = breast_cancer_x, #another way to  specify the model formula
y = breast_cancery_y, # y = the response variable
method = "glm",
trControl = myControl,
preProcess = "medianImpute")
breastcancer_model
stuff <- mtcars %>% split(.$cyl)
library(tidyverse)
stuff <- mtcars %>% split(.$cyl)
stuff <- mtcars %>% split(cyl)
mtcars %>% split(.$mpg)
stuff <- mtcars %>% split(colnames(.))
stuff <- mtcars %>% split(colnames)
stuff <- mtcars %>% split(colnames(.$))
stuff <- mtcars$
ggplot(data = mtcars, aes(x = hp, y = disp)) + geom_point()
stuff <- mtcars$
ggplot(data = mtcars, aes(x = hp, y = disp)) + geom_point()
stuff <- mtcars$
ggplot(data = mtcars, aes(x = hp, y = disp)) +
geom_point()
stuff <- mtcars$
ggplot(data = mtcars, aes(x = hp, y = disp)) +
geom_point()
stuff <- mtcars$
ggplot(data = mtcars, aes(x = hp, y = disp)) +
geom_point()
ggplot(data = mtcars, aes(x = hp, y = disp)) +
geom_point()
stuff <- mtcars$
ggplot(data = mtcars, aes(x = hp, y = disp)) + geom_point()
ggplot(data = mtcars, aes(x = hp, y = disp)) + geom_point()
for i in(colnames(mtcars)){
mtcars %>%
ggplot(., aes(x = hp, y = i)) + geom_point()
}
for i in(colnames(mtcars){
mtcars %>%
ggplot(., aes(x = hp, y = i)) + geom_point()
}
for (i in colnames(mtcars)){
mtcars %>%
ggplot(., aes(x = hp, y = i)) + geom_point()
}
for (i in colnames(mtcars)){
mtcars %>%
ggplot(., aes(x = hp, y = i)) + geom_point()
}
colls <- colnames(mtcars)
for (i in colls){
mtcars %>%
ggplot(., aes(hp, i)) + geom_point()
}
for (i in colls){
mtcars %>%
p <- ggplot(., aes(hp, i)) + geom_point()
print(p)
}
mtcars %>%
p <- ggplot(, aes(hp, i)) + geom_point()
mtcars %>%
p <- ggplot(aes(hp, i)) + geom_point()
mtcars %>%
p <- ggplot(~.,aes(hp, i)) + geom_point()
mtcars %>%
p <- ~ggplot(., aes(hp, i)) + geom_point()
mtcars %>%
~ggplot(., aes(hp, i)) + geom_point()
mtcars %>%
ggplot(., aes(hp, i)) + geom_point()
for (i in colls){
mtcars %>%
ggplot(., aes(hp, i)) + geom_point()
print(p)
}
print(p)
for (i in colls){
mtcars %>%
ggplot(., aes(hp, i)) + geom_point()
}
p <- mtcars %>%
ggplot(., aes(hp, i)) + geom_point()
p
for (i in 1:length(colls)){
p <- mtcars %>%
ggplot(., aes(hp, i)) + geom_point()
p
}
for (i in colls)){
p <- mtcars %>%
ggplot(., aes(hp, i)) + geom_point()
p
}
y <- mtcars %>% list(.$mpg, .$cyl, .$disp)
y
y <- list(.$mpg, .$cyl, .$disp)
map(y)
map(y, ggplot())
map(y, ggplot
map(y, ggplot)
mtcars %>%
map(y, ~ggplot(.,aes(hp, y))+ geom_point())
y <- (.$mpg, .$cyl, .$disp)
y <- (mtcars$mpg, mtcars$cyl, mtcars$disp)
y <- (mtcars$mpg, mtcars$cyl, mtcars$disp)
y <- list(mtcars$mpg, mtcars$cyl, mtcars$disp)
mtcars %>%
map(, ~ggplot(.,aes(hp, y))+ geom_point())
mtcars %>%
map(y, ~ggplot(.,aes(hp, y))+ geom_point())
mtcars %>%
map(y, ggplot(.,aes(hp, y))+ geom_point())
mtcars %>%
map(y, ggplot(.,aes(hp, y = y))+ geom_point())
mtcars %>%
map(y, ~ggplot(., aes(hp,y))+ geom_point())
getwd
getwd()
setwd("DataCamp")
getwd()
install.packages("qdap")
library(qdap)
install.packages("qdap")
library(qdap)
install.packages("rJava")
library(qdap)
install.packages("rJava")
install.packages("qdap")
library(qdap)
library(qdap)
library(qdap)
install.packages("qdap")
library(qdap)
library(qdap)
install.packages("rJava")
library(qdap)
Sys.getenv()
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(qdap)
library(rJava)
Sys.setenv(JAVA_HOME='C:\Program Files (x86)\Java\jre1.8.0_131')
Sys.setenv(JAVA_HOME='C:\Program Files (x86)\Java\jre1.8.0_131\\')
Sys.setenv(JAVA_HOME='C:/Program Files (x86)/Java/jre1.8.0_131')
library(rJava)
library(qdap)
install.packages("rJava")
library(qdap)
Sys.setenv(JAVA_HOME='C:\Program Files\Java\jre1.8.0_131')
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_131')
library(rJava)
install.packages("rJava")
library(rJava)
library(qdap)
install.packages("qdap")
library(qdap)
new_text <- "DataCamp is the first online learning platform that focuses on building the best learning experience specifically for Data Science. We have offices in Boston and Belgium and to date, we trained over 250,000 (aspiring) data scientists in over 150 countries. These data science enthusiasts completed more than 9 million exercises. You can take free beginner courses, or subscribe for $25/month to get access to all premium courses."
print(new_text)
term_count <- freq_terms(new_text, 10)
plot(term_count)
qdap::raj
qdap::raw.time.span
qdap::DATA
qdap::pres_debate_raw2012
df <- qdap::DATA
df <- qdap::DATA
str(df)
nrow(df)
dialogue_df <- df$state
library(tm)
dialogue_source <- VectorSource("dialogue_df")
dialogue_source
dialogue_source <- VectorSource(dialogue_df)
dialogue_source
dialogue_corpus <- VCorpus(dialogue_source)
dialogue_corpus
dialogue_corpus[[7]]
dialogue_corpus[[7]][1]
dialogue_corpus[[7]][2]
dialogue_corpus[[7]][1]
example_text <- pres_debate_raw2012
example_text
str(example_text)
example_text <- data("crude")
example_text <- as.data.frame(data("crude"))
View(example_text)
example_text <- data.frame(num = c(1,2,3),
Author1 = c("yes", "no", "maybe so"),
Author2 = c("Hello", "How are you?", "Am I doing this right?"))
str(example_text)
df_source <- DataframeSource(example_text[ , 2:3])
df_corpus <- VCorpus(df_source)
df_corpus
vec_source <- VectorSource(example_text[,3])
vec_corpus <- VCorpus(vec_source)
vec_corpus
# Create the object: text
text <- "<b>She</b> woke up at       6 A.M. It\'s so early!  She was only 10% awake and began drinking coffee in front of her computer."
# All lowercase
tolower(text)
# Remove punctuation
removePunctuation(text)
# Remove numbers
removeNumbers(text)
# Remove whitespace
stripWhitespace(text)
text
# List standard English stop words
stopwords("en")
# Print text without standard stop words
removeWords(text, stopwords("en"))
# Add "coffee" and "bean" to the list: new_stops
new_stops <- c("coffee", "bean", stopwords("en"))
# Remove stop words from text
removeWords(text, new_stops)
# Create complicate
complicate <- c("complicated", "complication", "complicatedly")
# Perform word stemming: stem_doc
stem_doc <- stemDocument(complicate)
stem_doc
# Create the completion dictionary: comp_dict
comp_dict <- "complicate"
# Perform stem completion: complete_text
complete_text <- stemCompletion(stem_doc, comp_dict)
# Print complete_text
complete_text
text_data <- "In a complicated haste, Tom rushed to fix a new complication, too complicatedly."
# create text
text_data <- "In a complicated haste, Tom rushed to fix a new complication, too complicatedly."
# Remove punctuation: rm_punc
rm_punc <- removePunctuation(text_data)
# Create character vector: n_char_vec
n_char_vec <- unlist(strsplit(rm_punc, split = ' '))
# Perform word stemming: stem_doc
stem_doc <- stemDocument(n_char_vec)
# Print stem_doc
stem_doc
# Re-complete stemmed document: complete_doc
complete_doc <- stemCompletion(stem_doc, comp_dict)
# Print complete_doc
complete_doc
rm_punc <- removePunctuation(text_data)
n_char_vec <- unlist(strsplit(rm_punc, split = ' '))
stem_doc <- stemDocument(n_char_vec)
stem_doc
comp_dict <- c("In", "a", "complicate", "haste", "Tom", "rush", "to", "fix", "new", "too")
# create text
text_data <- "In a complicated haste, Tom rushed to fix a new complication, too complicatedly."
#define completed dictionary
comp_dict <- c("In", "a", "complicate", "haste", "Tom", "rush", "to", "fix", "new", "too")
# Remove punctuation: rm_punc
rm_punc <- removePunctuation(text_data)
# Create character vector: n_char_vec
n_char_vec <- unlist(strsplit(rm_punc, split = ' '))
# Perform word stemming: stem_doc
stem_doc <- stemDocument(n_char_vec)
# Print stem_doc
stem_doc
# Re-complete stemmed document: complete_doc
complete_doc <- stemCompletion(stem_doc, comp_dict)
# Print complete_doc
complete_doc
rm(crude)
presidents <- pres_debate_raw2012
str(presidents)
str(presidents)
presidents_corpus <- VCorpus(presidents[, 2])
presidents_source <- DataframeSource(presidents)
presidents_corpus <- VCorpus(presidents)
presidents_corpus
presidents_corpus <- VCorpus(presidents)
presidents_corpus <- VCorpus(presidents_source)
presidents_corpus
presidents_corpus[[5]]
presidents_corpus[[5]][[1]]
presidents_corpus[[19]][[1]]
presidents_corpus[[19]][[2]]
presidents_corpus[[19]][[3]]
presidents_corpus[[19]][[2]]
presidents_corpus[[19]][[1]]
presidents_corpus[[2]][[1]]
presidents_corpus[1]
presidents_corpus[1][[2]]
presidents_corpus[1][[1]]
presidents_corpus[[1]][[1]]
presidents_corpus[[1]][1]
View(presidents)
presidents_source
presidents_corpus <- VCorpus(presidents_source)
presidents_corpus[[19]][1]
presidents_corpus[[21]][1]
presidents_corpus[[21]][2]
presidents_corpus[[21]][[1]]
df_corpus
vec_corpus
df_corpus[[1]][1]
df_corpus[[1]][1]
df_corpus[[1]][2]
df_corpus[[2]][2]
df_corpus[[2]][1]
df_corpus[[2]][3]
str(example_text)
example_text <- data.frame(num = c(1,2,3),
Author1 = c("yes", "no", "maybe so"),
Author2 = c("Hello", "How are you?", "Am I doing this right?"))
df_source <- DataframeSource(example_text[ , 2:3])
example_text <- data.frame(num = c(1,2,3),
Author1 = c("yes", "no", "maybe so"),
Author2 = c("Hello", "How are you?", "Am I doing this right?"), stringsAsFactors = FALSE)
str(example_text)
df_source <- DataframeSource(example_text[ , 2:3])
df_corpus <- VCorpus(df_source)
df_corpus
df_corpus[[2]][1]
vec_source <- VectorSource(example_text[,3])
vec_corpus <- VCorpus(vec_source)
vec_corpus
presidents <- data.frame(pres_debate_raw2012, stringsAsFactors = FALSE)
str(presidents)
presidents_source <- DataframeSource(presidents)
presidents_source
presidents_corpus <- VCorpus(presidents_source)
presidents_corpus[[21]][[1]]
presidents <- data.frame(pres_debate_raw2012, stringsAsFactors = FALSE)
str(presidents)
presidents_source <- DataframeSource(presidents)
presidents_corpus <- VCorpus(presidents_source)
presidents_corpus[[21]][[1]]
str(pres_debate_raw2012)
presidents_corpus[[19]][[1]]
presidents_corpus[[14]][[1]]
presidents_corpus[[51]][[1]]
presidents_corpus[[20]][[1]]
presidents_corpus[[21]][[1]]
presidents_corpus[[2]][[1]]
presidents_corpus[[3]][[1]]
View(presidents)
presidents_corpus[[43]][[1]]
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removeWords, c(stopwords("en"), "coffee", "mug"))
return(corpus)
}
clean_corp <- clean_corpus(presidents_corpus)
clean_corp[[43]][1]
clean_corp
clean_corp[[43]][2]
clean_corp[[43]][3]
clean_corp[[13]][1]
presidents_corpus[[43]][[1]]
presidents_corpus[[43]][1]
clean_corp[[43]][2]
clean_corp[[43]][1]
clean_corp[[43]][[1]]
clean_corp[[43]][1]
presidents_corpus[[43]][1]
corpus <- tm_map(corpus, removeWords, stopwords("en"))
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removeWords, stopwords("en"))
return(corpus)
}
clean_corp <- clean_corpus(presidents_corpus)
clean_corp[[43]][1]
clean_corp
clean_corp[[43]]
presidents_corpus[[43]]
presidents_corpus[[43]]
clean_corp[[43]]
clean_corp[[43]][2]
presidents[43]
presidents[2,43]
presidents[43, 2]
pres_dtm <- DocumentTermMatrix(clean_corp)
pres_dtm <- DocumentTermMatrix(clean_corp[1])
pres_dtm <- DocumentTermMatrix(clean_corp[[1])
```
pres_dtm <- DocumentTermMatrix(clean_corp[[1]])
pres_dtm <- DocumentTermMatrix(clean_corp[[1]][1])
pres_dtm <- presidents_corpus
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removeWords, stopwords("en"))
#return(corpus)
}
clean_corp <- clean_corpus(presidents_corpus)
clean_corp
clean_corp[[43]][2]
clean_corp[[43]][1]
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removeWords, stopwords("en"))
return(corpus)
}
clean_corp <- clean_corpus(presidents_corpus)
clean_corp <- clean_corpus(presidents_corpus)
clean_corp[[43]][1]
presidents[43, 2]
pres_dtm <- clean_corp
pres_dtm
pres_dtm <- DocumentTermMatrix(clean_corp)
pres_dtm
pres_m <- as.matrix((pres_dtm))
dim(pres_m)
View(pres_m)
pres_m[45:51, 1111:1223]
pres_m[45:51, 1111:1115]
pres_m[45:51, 123:130]
pres_tdm <- DocumentTermMatrix(clean_corp)
pres_tdm
pres_m <- as.matrix((pres_tdm))
dim(pres_m)
pres_m[45:51, 123:130]
pres_tdm <- TermDocumentMatrix(clean_corp)
pres_tdm
pres_m <- as.matrix((pres_tdm))
dim(pres_m)
pres_m[45:51, 123:130]
pres_m[123:130, 45:51]
